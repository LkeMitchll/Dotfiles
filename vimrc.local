" ===============================
" VIMRC LOCAL - LUKE MITCHELL
" ===============================
"
" ===============================
" General Settings
" ===============================
set noeb vb t_vb=
set shell=/usr/local/bin/zsh " Set shell
let mapleader = ',' " Override leader
set hlsearch " Highlight searched term
set nocompatible   " Disable vi-compatibility
set laststatus=2   " Always show the statusline
set clipboard=unnamed " use system clipboard

" ===============================
" Language & Encoding
" ===============================
setglobal langmenu=en_GB.UTF-8
setglobal encoding=utf8
setglobal fileencoding=utf-8

" ==============================
" Tabs
" ==============================
set smartindent
set softtabstop=2
set expandtab
set autoindent

" ==============================
" Theme
" ==============================
colorscheme gotham
let g:airline_theme="gotham"
set background=dark
:hi Normal ctermbg=black

" Cursor
:hi CursorLine   cterm=NONE ctermbg=black ctermfg=NONE guibg=black guifg=NONE
:hi CursorColumn cterm=NONE ctermbg=black ctermfg=NONE guibg=black guifg=NONE

" Line No's
:hi LineNr guibg=NONE guifg=grey ctermbg=NONE ctermfg=11
:hi VertSplit ctermbg=blue ctermfg=black

" Diffs
:hi DiffAdd      guibg=#003300
:hi DiffChange   guibg=#003300
:hi DiffDelete   guifg=#330000 guibg=#330000
:hi DiffText     guibg=#990000

" Gutter signs
:hi SignifySignAdd ctermbg=NONE
:hi SignifySignChange ctermbg=NONE
:hi SignifySignChangeDelete ctermbg=NONE
:hi SignifySignDeleteFirstSign ctermbg=NONE
:hi clear SignColumn
:hi SignColumn guibg=NONE ctermbg=NONE
:hi SyntasticWarningSign ctermbg=NONE ctermfg=9
:hi SyntasticErrorSign ctermbg=9 ctermfg=black

" Search
:hi Search ctermfg=black

" Tabs
:hi TabLineFill ctermbg=10 ctermfg=black
:hi TabLine ctermbg=10 ctermfg=white
:hi TabLineSel ctermbg=yellow ctermfg=white

" CtrlP Dialog
:hi Pmenu guibg=black ctermbg=7 ctermfg=black
:hi PmenuSel ctermbg=9 ctermfg=white

set guicursor=n-v-c:ver15-Cursor

" Hide Scrollbars on GUI
set guioptions-=r
set guioptions-=L

" ===============================
" Syntax
" ===============================
au BufRead,BufNewFile *.zsh-theme,*.zsh set filetype=zsh
au BufRead,BufNewFile *.xm set filetype=logos
au BufRead,BufNewFile *.vimrc,*.vimrc.*,*.vim set filetype=vim
au BufRead,BufNewFile *.scss,*.css.scss,*.sass,*.css.sass set syntax=sass

" Hack to force syntax Highlighting on sass files
map <Leader>sy :syntax on<CR>
autocmd BufRead,BufNewFile *.sass,*.css.sass,*.scss,*.css.scss :syntax on

" ===============================
" Plugins
" ===============================

" | Airline |
let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'fancy'
let g:airline_left_sep=''
let g:airline_right_sep=''

" | Indentline |
let g:indentLine_color_term = 4
let g:indentLine_char = "Â¦"

" | NeoSnippet | "
let g:neosnippet#snippets_directory='~/.vim/snippets'

"| NeoComplete |"

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
  \ 'default' : '',
  \ 'vimshell' : $HOME.'/.vimshell_hist',
  \ 'scheme' : $HOME.'/.gosh_completions'
    \ }
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()
" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" | The Silver Searcher |
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  let g:EasyGrepCommand=1

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  unlet g:ctrlp_user_command
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" | Syntastic |
"let g:syntastic_debug = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_aggregate_errors = 1

let g:syntastic_scss_checkers = ['scss_lint', 'sass']
let g:syntastic_scss_scss_lint_args = "--config /Users/Luke/.vim/scss-lint.yml"
let g:syntastic_python_checker= "flake8"
let g:syntastic_python_checker_args="--ignore=E501,W601"
let g:syntastic_haml_checkers = ['haml_lint', 'haml']
let g:syntastic_haml_haml_lint_args = "--config /Users/Luke/.vim/haml-lint.yml"
let g:syntastic_ruby_checkers = ['rubocop', 'mri']
let g:syntastic_ruby_rubocop_args = '--config /Users/Luke/.vim/rubocop.yml'
let g:syntastic_html_tidy_exec = "/usr/local/bin/tidy"

" | Vimux |
map <Leader>tr :VimuxPromptCommand<CR>
map <Leader>tc :VimuxCloseRunner<CR>
map <Leader>ti :VimuxInspectRunner<CR>
map <Leader>tl :VimuxRunLastCommand<CR>

" | Emmet |
let g:user_emmet_mode='a'

" | Fugitive |
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>

" | Rspec |
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
let g:rspec_runner = "os_x_iterm"

" | NerdTree |
map <Leader>n <plug>NERDTreeTabsToggle<CR>
let g:NERDTreeShowLineNumbers=1

" | CTRLP |
" Search from current directory instead of project root
let g:ctrlp_working_path_mode = 0
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn|sass-cache)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }
" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" ===============================
" Keyboard Shortcuts
" ===============================

" Reload This file
map <Leader>rv :so ~/.vimrc.local<CR>

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Session Saving keys
map <F2> :call SaveSess()<CR>
map <F3> :call RestoreSess()<CR>

" NumberToggle
let g:NumberToggleTrigger="<F10>"

" Remove trailing whitespace [f5]
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" UPPERCASE and lowercase conversion
nnoremap g^ gUiW
nnoremap gv guiW

" ===============================
" Functions
" ===============================

" | Cheatsheet |
let g:cheatsheet_dir = "~/.vim/"
let g:cheatsheet_ext = "~/.vim/cheatsheet.txt"

command! -nargs=? -complete=customlist,CheatSheetComplete CS call ToggleCheatSheet(<f-args>)
nmap <F6> :CS<CR>

" strip extension from complete list
function! CheatSheetComplete(A)
  return map(split(globpath(g:cheatsheet_dir, a:A.'*'.g:cheatsheet_ext)),
    \ "v:val[".strlen(expand(g:cheatsheet_dir)).
    \ ":-".(strlen(g:cheatsheet_ext) + 1)."]")
endfun

" specify cheatsheet or use filetype of open buffer as default
" instead of saving window status in a boolean variable,
" test if the file is open (by name). If a boolean is used,
" you'll run into trouble if you close the window manually with :wq etc
function! ToggleCheatSheet(...)
  let s:file = g:cheatsheet_ext
  if bufwinnr(s:file) != -1
    call ToggleWindowClose(s:file)
  else
    call ToggleWindowOpen(s:file)
  endif
endfun

" stateless open and close so it can be used with other plugins
function! ToggleWindowOpen(file)
  let splitr = &splitright
  set splitright
  exe ":vsp ".a:file
  exe ":vertical resize 84"
  if !splitr
    set splitright
  endif
endfun

function! ToggleWindowClose(file)
  let w_orig = bufwinnr('%')
  let w = bufwinnr(a:file)
  exe w.'wincmd w'
  exe ':silent wq!'
  if w != w_orig
    exe w_orig.'wincmd w'
  endif
endfun
" END CHEATSHEET

" Easy find in files
fu! FindInFiles(keyword, dir)
  execute 'vim ' . a:keyword . ' ' . a:dir . ' | cw'
endfun

" Auto Sessions
fu! SaveSess()
  execute 'mksession! /Users/luke/.vim/session.vim'
endfunction

fu! RestoreSess()
execute 'so /Users/luke/.vim/session.vim'
if bufexists(1)
  for l in range(1, bufnr('$'))
    if bufwinnr(l) == -1
      exec 'sbuffer ' . l
    endif
  endfor
endif
endfunction

autocmd VimLeave * call SaveSess()
